syntax = "proto3";
package protocols;
option go_package = "github.com/movsb/taoblog/proto";

import "google/protobuf/field_mask.proto";
import "comment.proto";

message Metas {
	message Source {
		string name = 1;
		string url = 2;
		string description = 3;
		int32  time = 4;
	}
	message Geo {
		string name = 1;
		float longitude = 2;
		float latitude = 3;
	}
	message Origin {
		enum Platform {
			OriginUnspecified = 0;
			Twitter = 1;
		}
		// 来源平台。
		Platform platform = 1;
		// 唯一ID编成部分。
		repeated string slugs = 2;
		// 描述。
		string description = 3;
	}

	// TODO：以下两者应该由 style.css 和 script.js 等独立文件实现。
	// 置于 <head> 最后的。
	string header = 1;
	// 置于 <body> 最后的。
	string footer = 2;

	// 文章是否已经过时。
	bool outdated = 3;
	
	// 是否以宽屏模式显示内容。
	bool wide = 4;

	// 文章附件来源。
	// 第一个参数是相对路径。
	map<string,Source> sources = 10;

	// 地理位置信息。
	Geo geo = 11;

	// 文章原始来源信息
	Origin origin = 12;

	// 微信短链接。形如："-UWZEu5Z74DZgRzKksTBtw"。
	// TODO 合并进 Origin。
	string weixin = 100;

	// 是否开启目录。
	// 主题可以忽略此配置而选择总是开启或关闭。
	bool toc = 101;

	// 是否 <p> 缩进 2em；测试功能。
	bool text_indent = 102;

	// 注意，不要往这里面加仅输出或内部计算并保存的参数。
}

message Post {
	int64 id = 1;
	int32 date = 2;
	int32 modified = 3;
	string title = 4;
	string content = 5;
	string slug = 6;
	string type = 7;
	int64 category = 8;
	string status = 9;
	int64 page_view = 10;
	bool comment_status = 11;
	int64 comments = 12;
	Metas metas = 13;
	string source = 14;
	string source_type = 15;

	// 标签#️⃣列表。
	// 仅输出。
	repeated string tags = 16;

	// ~~文章最后被评论的时间~~。
	// 更新：文章的评论最后有更新（包括：创建、更新、删除）的时间。
	// 与文章的更新时间一起贡献给 304 处理函数。
	// 这个值可以是空的，表示没有被评论过。（更新：也可能表示数据库升级开始后没有评论过）
	// TODO 考虑换个名字了。
	int32 last_commented_at = 17;

	// 相关文章列表。
	// 数量固定。
	// 仅在 GetPost 时指定选项后返回。
	// 只有 id 和 title 有效。
	repeated Post relates = 18;

	// 文章的链接。
	string link = 19;
	
	// 创建时间和修改时间所在的时区。
	string date_timezone = 20;
	string modified_timezone = 21;

	int32 user_id = 22;
	
	// 评论列表。
	// 名字被上面的占用了，记得把上面的改名。
	// 仅在 GetPost 时指定选项后返回。
	repeated Comment comment_list = 23;

	// 用户权限。
	message UserPerms {
		int32 user_id = 1;
		string user_name = 2;
		bool can_read = 10;
	}
	repeated UserPerms user_perms = 24;

	// 目录。
	string toc = 25;

	// 是否置顶。
	bool top = 26;

	// 引用信息。
	// 记录文章引用和被引用情况（站内）。
	message References {
		message Posts {
			repeated int32 to = 1;
			repeated int32 from = 2;
		}
		// message Comments {
		// 	repeated int32 to = 1;
		// 	repeated int32 from = 2;
		// }
		Posts posts = 1;
		// Comments comments = 2;
	}
	// 仅输出。
	References references = 27;
}

enum LinkKind {
	LinkKindNone = 0;
	LinkKindRooted = 1;
	LinkKindFull = 2;
}

message GetPostOptions {
	// 渲染内容选项。
	PostContentOptions content_options = 1;

	// 是否包含文章链接。
	LinkKind with_link = 20;

	// 是否包含“相关文章”。
	bool with_relates = 100;

	// 是否返回文章的目录。
	// 0: 不要，1:要（文章自己可以决定不要），2:一定要
	int32 with_toc = 101;

	// 是否返回权限用户。
	bool with_user_perms = 102;

	// 是否返回文章的评论列表。
	bool with_comments = 103;
}

message GetPostRequest {
	// 选择其一。
	int32 id = 1;
	string page = 2;

	GetPostOptions get_post_options = 10;
}

message UpdatePostRequest {
	Post post = 1;
	google.protobuf.FieldMask update_mask = 2;

	GetPostOptions get_post_options = 3;

	// 默认 modified 已被用作防冲突的版本号。
	// touch 可以用来控制是否更新 modified 为当前时间。
	// 默认为 false，表示要更新。
	bool do_not_touch = 4;

	bool update_top = 5;

	// 是否更新用户权限。
	bool update_user_perms = 101;
	repeated int32 user_perms = 102;
}

message DeletePostRequest {
	int32 id = 1;
}

message ListPostsRequest {
	GetPostOptions get_post_options = 1;

	int32 limit = 2;
	string order_by = 3;
	repeated string kinds = 4;

	// 如果 > 0，则只会列出从这个时间点开始、结束的文章。
	// 以后有过更新的文章，适用于备份用。
	// 时间范围：[NotBefore, NotAfter)。
	int32 modified_not_before = 5;
	int32 modified_not_after = 6;

	// 文章的所有者。
	// 如果不指定，默认为 All。
	// 只对已登录用户有效，未登录用户始终只能看公开文章。
	Ownership ownership = 7;
}

message ListPostsResponse {
	repeated Post posts = 1;
}

message GetTopPostsRequest {
	GetPostOptions get_post_options = 1;
}
message GetTopPostsResponse {
	repeated Post posts = 1;
}
message ReorderTopPostsRequest {
	repeated int64 ids = 1;
}

message GetPostCommentsCountRequest {
	int64 post_id = 1;
}

message GetPostCommentsCountResponse {
	int64 count = 1;
}

message SetPostStatusRequest {
	int64 id = 1;
	
	// TODO 换成枚举
	string status = 2;

	// Whether to create_time and update_time
	bool touch = 3;
}

message SetPostStatusResponse {

}

message PreviewPostRequest {
	int32 id = 1;
	string markdown = 2;
}

message PreviewPostResponse {
	string html = 1;
	string diff = 2;
}

message CreateStylingPageRequest {
	string source = 1;
}
message CreateStylingPageResponse {}

message CheckTaskListItemsRequest {
	// 文章/评论编号
	int32 id = 1;

	// 文章修改时间，用于版本同步。
	int32 modification_time = 2;

	// 任务列表。
	repeated int32 checks = 10;
	repeated int32 unchecks = 11;
}

message CheckTaskListItemsResponse {
	int32 modification_time = 1;
}

enum Perm {
	PermUnknown = 0;
	PermRead = 1;
}

message UserPerm {
	repeated Perm perms = 1;
}

message SetPostACLRequest {
	int64 post_id = 1;
	map<int32, UserPerm> users = 2;
}

message SetPostACLResponse {

}

message GetPostACLRequest {
	int64 post_id = 1;
}

message SetPostUserIDRequest {
	int64 post_id = 1;
	int32 user_id = 2;
}

message SetPostUserIDResponse {}

message GetPostACLResponse {
	map<int32, UserPerm> users = 1;
}

message FileSpec {
	string path = 1;
	uint32 mode = 2;
	uint32 size = 3;
	uint32 time = 4;

	message Meta {
		int32 width = 1;
		int32 height = 2;
	}

	// 文件内容类型。
	// 仅在 list 的时候返回，其它时候不使用。
	// 仅通过后缀名判断，可能为空。
	string type = 5;

	// 文件的元数据。
	Meta meta = 6;
}

message ListPostFilesRequest {
	int32 post_id = 1;
}
message ListPostFilesResponse {
	repeated FileSpec files = 1;
}

message FileSystemRequest {
	message InitRequest {
		message Post {
			int64 id = 1;
		}
		oneof For {
			Post post = 1;
		}
	}

	InitRequest init = 1;

	message ListFilesRequest {}
	message ReadFileRequest {
		string path = 1;
	}
	message WriteFileRequest {
		FileSpec spec = 1;
		bytes data = 2;
	}
	message DeleteFileRequest {
		string path = 1;
	}
	oneof Request {
		ListFilesRequest list_files = 10;
		WriteFileRequest write_file = 11;
		DeleteFileRequest delete_file = 12;
		ReadFileRequest read_file = 13;
	}
}

message FileSystemResponse {
	message InitResponse{}
	
	InitResponse init = 1;
	
	message ListFilesResponse {
		repeated FileSpec files = 1;
	}
	message WriteFileResponse { }
	message DeleteFileResponse { }
	message ReadFileResponse {
		bytes data = 1;
	}

	oneof Response {
		ListFilesResponse list_files = 10;
		WriteFileResponse write_file = 11;
		DeleteFileResponse delete_file = 12;
		ReadFileResponse read_file = 13;
	}
}
