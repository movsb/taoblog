syntax = "proto3";
package protocols;
option go_package = "github.com/movsb/taoblog/proto";

import "auth.proto";
import "backup.proto";
import "post.proto";
import "comment.proto";
import "search.proto";
import "config.proto";
import "utils.proto";
import "notify.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

service Notify {
	rpc SendEmail (SendEmailRequest) returns (SendEmailResponse) {
		option (google.api.http) = {
			post: "/v3/notify/email";
			body: "*";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "发送邮件。";
		};
	}
	
	rpc SendInstant (SendInstantRequest) returns (SendInstantResponse) {
		option (google.api.http) = {
			post: "/v3/notify/instant";
			body: "*";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "发送即时通知消息。";
		};
	}
}

service Utils {
	rpc FormatTime (FormatTimeRequest) returns (FormatTimeResponse) {
		option (google.api.http) = {
			post: "/v3/utils/time/format";
			body: "*";
		};
	};

	// 远程拨号器。用于从国外回国内。
	rpc DialRemote(stream DialRemoteMessage) returns (stream DialRemoteMessage);

	rpc ResolveGeoLocation (ResolveGeoLocationRequest) returns (ResolveGeoLocationResponse) {
		option (google.api.http) = {
			get: "/v3/utils/geo/resolve";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "从坐标解析位置。";
		};
	}
}

service Auth {
	rpc BeginPasskeysLogin (BeginPasskeysLoginRequest) returns (BeginPasskeysLoginResponse);
	rpc FinishPasskeysLogin (FinishPasskeysLoginRequest) returns (FinishPasskeysLoginResponse);

	rpc CreateUser (User) returns (User) {
		option (google.api.http) = {
			post: "/v3/users";
			body: "*";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "创建用户。";
		};
	}
	rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse) {
		option (google.api.http) = {
			patch: "/v3/users/{user.id=*}";
			body: "*";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "更新用户。";
		};
	}
	rpc ListUsers (ListUsersRequest) returns (ListUsersResponse) {
		option (google.api.http) = {
			get: "/v3/users";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "列举用户。";
		};
	}
}

service Management {
	// Config

	rpc GetConfig (GetConfigRequest) returns (GetConfigResponse) {
		option (google.api.http) = {
			get: "/v3/configs/{path}";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "获取配置。";
		};
	};
	rpc SetConfig (SetConfigRequest) returns (SetConfigResponse) {
		option (google.api.http) = {
			post: "/v3/configs/{path}";
			body: "yaml";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "设置配置。";
		};
	};

	// Backup

	rpc BackupPosts(BackupPostsRequest) returns (stream BackupPostsResponse) {
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "导出数据库。";
		};
	}

	rpc BackupFiles (stream BackupFilesRequest) returns (stream BackupFilesResponse) {
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "导出文件。";
		};
	};
	
	rpc GetSyncConfig (GetSyncConfigRequest) returns (GetSyncConfigResponse) {
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "返回增量同步文章需要的配置参数。";
		};
	}

	// 文件系统管理：期允许管理的对象：文章附件、评论附件、备份文件、根目录等。
	// TODO：合并上述 BackupFiles 接口、Backup 接口。
	rpc FileSystem(stream FileSystemRequest) returns (stream FileSystemResponse) {
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "文件管理。";
		};
	}

	// 启动重启任务。
	// NOTE：实际上只是退出，借助于 docker 的自动重启容器，所以相当于重启。
	rpc Restart(RestartRequest) returns (RestartResponse) {}

	// 置“镜像需要更新”状态，守护进程获取此状态后更新镜像并重启。
	// 此状态在 GetInfo 的接口的字段中标识。
	rpc ScheduleUpdate(ScheduleUpdateRequest) returns (ScheduleUpdateResponse) {}

	// 修改网站图标。
	rpc SetFavicon (SetFaviconRequest) returns (SetFaviconResponse) {}
}

service Search {
	rpc SearchPosts(SearchPostsRequest) returns (SearchPostsResponse) {
		option (google.api.http) = {
			get: "/v3/search/posts";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "文章搜索。";
		};
	}
}

service TaoBlog {
	rpc Ping(PingRequest) returns (PingResponse) {
		option (google.api.http) = {
			get: "/v3/ping";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "Ping 服务器。";
		};
	}
	
	rpc GetInfo(GetInfoRequest) returns (GetInfoResponse) {
		option (google.api.http) = {
			get: "/v3/info";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "获取基本信息。";
		};
	}

	// POSTS

	rpc CreatePost(Post) returns (Post) {
		option (google.api.http) = {
			post: "/v3/posts";
			body: "*";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "创建新文章。";
		};
	}
	rpc GetPost (GetPostRequest) returns (Post) {
		option (google.api.http) = {
			get: "/v3/posts/{id=*}";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "获取某篇文章。";
		};
	}
	rpc UpdatePost(UpdatePostRequest) returns (Post) {
		option (google.api.http) = {
			patch: "/v3/posts/{post.id=*}";
			body: "*";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "更新文章。";
		};
	}
	rpc DeletePost (DeletePostRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			delete: "/v3/posts/{id}";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "删除文章及其所有相关资源（评论、标签等）。";
		};
	}
	rpc ListPosts (ListPostsRequest) returns (ListPostsResponse) {
		option (google.api.http) = {
			get: "/v3/posts";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "列举文章。";
		};
	}
	rpc SetPostStatus (SetPostStatusRequest) returns (SetPostStatusResponse) {
		option (google.api.http) = {
			post: "/v3/posts/{id=*}:setStatus";
			body: "*";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "是否公开文章。";
		};
	}
	rpc PreviewPost (PreviewPostRequest) returns (PreviewPostResponse) {
		option (google.api.http) = {
			post: "/v3/posts:preview";
			body: "*";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "文章预览。";
		};
	}
	rpc CheckPostTaskListItems (CheckTaskListItemsRequest) returns (CheckTaskListItemsResponse) {
		option (google.api.http) = {
			patch: "/v3/posts/{id=*}/tasks:check";
			body: "*";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "完成/取消完成任务。";
		};
	}
	rpc SetPostACL (SetPostACLRequest) returns (SetPostACLResponse) {
		option (google.api.http) = {
			patch: "/v3/posts/{post_id=*}/perms";
			body: "*";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "为文章设置权限。";
		};
	}
	rpc GetPostACL (GetPostACLRequest) returns (GetPostACLResponse) {
		option (google.api.http) = {
			get: "/v3/posts/{post_id=*}/perms";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "获取文章权限。";
		};
	}
	rpc SetPostUserID (SetPostUserIDRequest) returns (SetPostUserIDResponse) {
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "转移文章给用户。";
		};
	}

	rpc ListPostFiles (ListPostFilesRequest) returns (ListPostFilesResponse) {
		option (google.api.http) = {
			get: "/v3/posts/{post_id=*}/files";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "获取文件列表。";
		};
	}

	// Comments

	rpc CreateComment (Comment) returns (Comment) {
		option (google.api.http) = {
			post: "/v3/posts/{post_id=*}/comments";
			body: "*";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "创建一条评论。";
		};
	}
	rpc GetComment(GetCommentRequest) returns (Comment) {
		option (google.api.http) = {
			get: "/v3/comments/{id=*}";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "获取指定编号的评论。";
		};
	}
	rpc UpdateComment(UpdateCommentRequest) returns (Comment) {
		option (google.api.http) = {
			patch: "/v3/comments/{comment.id=*}";
			body: "*";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "更新指定编号的评论。";
		};
	}
	rpc DeleteComment (DeleteCommentRequest) returns (DeleteCommentResponse) {
		option (google.api.http) = {
			delete: "/v3/comments/{id=*}";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "删除某条评论。";
		};
	}
	rpc ListComments (ListCommentsRequest) returns (ListCommentsResponse) {
		option (google.api.http) = {
			get: "/v3/comments";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "获取评论列表。";
		};
	}
	rpc SetCommentPostID (SetCommentPostIDRequest) returns (SetCommentPostIDResponse) {
		option (google.api.http) = {
			post: "/v3/comments/{id=*}:setPostID";
			body: "*";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "转移某顶级评论（连同子评论）到另一篇文章。";
		};
	}
	rpc GetPostCommentsCount (GetPostCommentsCountRequest) returns (GetPostCommentsCountResponse) {
		option (google.api.http) = {
			get: "/v3/posts/{post_id=*}/comments:count";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "获取文章评论数。";
		};
	}
	rpc PreviewComment (PreviewCommentRequest) returns (PreviewCommentResponse) {
		option (google.api.http) = {
			post: "/v3/comments:preview";
			body: "*";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "评论预览。";
		};
	}
	rpc CheckCommentTaskListItems (CheckTaskListItemsRequest) returns (CheckTaskListItemsResponse) {
		option (google.api.http) = {
			patch: "/v3/comments/{id=*}/tasks:check";
			body: "*";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "完成/取消完成任务。";
		};
	}
	rpc CreateStylingPage (CreateStylingPageRequest) returns (CreateStylingPageResponse) {
		option (google.api.http) = {
			post: "/v3/styling";
			body: "*";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "创建样式测试页面";
		};
	}
}

message PingRequest {

}

message PingResponse {
	string pong = 1;
}
