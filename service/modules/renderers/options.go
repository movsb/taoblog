package renderers

import (
	"bytes"
	"fmt"
	"net/url"
	"path"
	"path/filepath"
	"slices"
	"strings"

	"github.com/PuerkitoBio/goquery"
	"github.com/yuin/goldmark/ast"
	"golang.org/x/net/html"
	"golang.org/x/net/html/atom"
)

// ÂêéÈù¢Áªü‰∏ÄÊîπÊàê Option„ÄÇ
type Option2 = any

type EnteringWalker interface {
	WalkEntering(n ast.Node) (ast.WalkStatus, error)
}

// ÈùûÂ∏∏‰ΩéÊïàÁöÑÊé•Âè£„ÄÇ„ÄÇ„ÄÇ
type HtmlFilter interface {
	FilterHtml(doc *html.Node) ([]byte, error)
}
type HtmlPrettifier interface {
	PrettifyHtml(doc *html.Node) ([]byte, error)
}

type HtmlTransformer interface {
	TransformHtml(doc *goquery.Document) error
}

// -----------------------------------------------------------------------------

func appendClass(node ast.Node, name string) {
	any, found := node.AttributeString(name)
	if list, ok := any.(string); !found || ok {
		if list == "" {
			list = name
		} else {
			list += " "
			list += name
		}
		node.SetAttributeString(`class`, list)
	}
}

func Testing() Option {
	return func(me *_Markdown) error {
		me.testing = true
		return nil
	}
}

// -----------------------------------------------------------------------------

// Ëé∑Âèñ‰ªé Markdown ‰∏≠Ëß£ÊûêÂæóÂà∞ÁöÑ‰∏ÄÁ∫ßÊ†áÈ¢ò„ÄÇ
func WithTitle(title *string) OptionNoError {
	return func(me *_Markdown) {
		me.title = title
	}
}

// -----------------------------------------------------------------------------

type _ReserveListItemMarkerStyle struct{}

var knownListItemMarkers = map[byte]string{
	'-': `minus`,
	'+': `plus`,
	'*': `asterisk`,
	'.': `period`,
	')': `parenthesis`,
}

func (*_ReserveListItemMarkerStyle) WalkEntering(n ast.Node) (ast.WalkStatus, error) {
	switch typed := n.(type) {
	case *ast.List:
		if class, ok := knownListItemMarkers[typed.Marker]; ok {
			appendClass(typed, `marker-`+class)
		}
	}
	return ast.WalkContinue, nil
}

// ‰øùÁïôÂàóË°®Ê†∑Âºè„ÄÇ
//
// Âè™ÊòØÂ¢ûÂä†Á±ªÂêçÔºåÂâçÁ´ØÈÄöËøáÁ±ªÂêçËá™Ë°åÂÜ≥ÂÆöÊÄé‰πàÂ±ïÁ§∫„ÄÇ
func WithReserveListItemMarkerStyle() Option2 {
	return &_ReserveListItemMarkerStyle{}
}

// -----------------------------------------------------------------------------

var prettifierStrings = map[string]string{
	`img`:    `ÂõæÁâá`,
	`table`:  `Ë°®Ê†º`,
	`video`:  `ËßÜÈ¢ë`,
	`audio`:  `Èü≥È¢ë`,
	`canvas`: `ÁîªÂ∏É`,
	`embed`:  `ÂØπË±°`,
	`map`:    `Âú∞Âõæ`,
	`object`: `ÂØπË±°`,
	`script`: `ËÑöÊú¨`,
	`svg`:    `ÂõæÁâá`,
	`code`:   `‰ª£Á†Å`,
}

var prettifierFuncs = map[string]func(buf *bytes.Buffer, node *html.Node) ast.WalkStatus{
	`a`: func(buf *bytes.Buffer, node *html.Node) ast.WalkStatus {
		hrefIndex := slices.IndexFunc(node.Attr, func(attr html.Attribute) bool { return attr.Key == `href` })
		if hrefIndex >= 0 && node.FirstChild != nil {
			var label string
			if node.FirstChild.Type == html.TextNode {
				label = node.FirstChild.Data
			} else if node.FirstChild.DataAtom == atom.Code {
				label = node.FirstChild.FirstChild.Data
			}
			// TODO ÈúÄË¶ÅËß£ URL Á†ÅÂêóÔºü
			if label != node.Attr[hrefIndex].Val {
				buf.WriteString(label)
				return ast.WalkSkipChildren
			}
		}
		buf.WriteString(`[ÈìæÊé•]`)
		return ast.WalkSkipChildren
	},
	`div`: func(buf *bytes.Buffer, node *html.Node) ast.WalkStatus {
		for _, a := range node.Attr {
			if strings.ToLower(a.Key) == `class` {
				if strings.Contains(a.Val, `footnotes`) {
					return ast.WalkSkipChildren
				}
			}
		}
		return ast.WalkContinue
	},
	`pre`: func(buf *bytes.Buffer, node *html.Node) ast.WalkStatus {
		if node.FirstChild != nil && node.FirstChild.NextSibling == nil && node.FirstChild.Data == `code` {
			buf.WriteString(`[‰ª£Á†Å]`)
			return ast.WalkSkipChildren
		}
		return ast.WalkContinue
	},
	`iframe`: func(buf *bytes.Buffer, node *html.Node) ast.WalkStatus {
		for _, a := range node.Attr {
			if strings.ToLower(a.Key) == `src` {
				if u, err := url.Parse(a.Val); err == nil {
					switch strings.ToLower(u.Hostname()) {
					case `www.youtube.com`:
						buf.WriteString(`[Ê≤πÁÆ°]`)
						return ast.WalkSkipChildren
					}
				}
			}
		}
		buf.WriteString(`[È°µÈù¢]`)
		return ast.WalkSkipChildren
	},
}

type _ContentPrettifier struct{}

func (*_ContentPrettifier) PrettifyHtml(doc *html.Node) ([]byte, error) {
	buf := bytes.NewBuffer(nil)

	var walk func(buf *bytes.Buffer, node *html.Node)
	walk = func(buf *bytes.Buffer, node *html.Node) {
		walkStatus := ast.WalkContinue
		switch node.Type {
		case html.TextNode:
			buf.WriteString(node.Data)
		case html.ElementNode:
			walkStatus = ast.WalkContinue
			if f, ok := prettifierStrings[node.Data]; ok {
				// ÁÆÄÁü≠ÁöÑ‰ª£Á†ÅÁõ¥Êé•ÊòæÁ§∫„ÄÇ
				if node.Data == `code` &&
					node.FirstChild != nil &&
					node.FirstChild.Type == html.TextNode &&
					node.FirstChild.NextSibling == nil &&
					len(node.FirstChild.Data) <= 16 {
					buf.WriteString(node.FirstChild.Data)
					walkStatus = ast.WalkSkipChildren
				} else {
					buf.WriteString(fmt.Sprintf(`[%s]`, f))
					walkStatus = ast.WalkSkipChildren
				}
			} else if f, ok := prettifierFuncs[node.Data]; ok {
				walkStatus = f(buf, node)
			}
		}
		if walkStatus == ast.WalkContinue {
			for c := node.FirstChild; c != nil; c = c.NextSibling {
				walk(buf, c)
			}
		}
	}

	walk(buf, doc)

	return buf.Bytes(), nil
}

// ÁÆÄÂåñÂπ∂ÁæéÂåñ Markdown ÁöÑÂ±ïÁ§∫„ÄÇ
// ÊØîÂ¶ÇÔºö
// - ‰∏çÊòæÁ§∫Â§çÊùÇÁöÑÈìæÊé•„ÄÅÂõæÁâá„ÄÅË°®Ê†º„ÄÅ‰ª£Á†ÅÂùóÁ≠âÂÖÉÁ¥†„ÄÇ
// - ‰∏çÊòæÁ§∫ËÑöÊ≥®„ÄÇ
//
// NOTE Âõ†‰∏∫ Markdown Âè™ËÉΩËß£ÊûêËÄå‰∏çËÉΩËøòÂéüÔºåÊâÄ‰ª•ËøôÈáåÂ§ÑÁêÜÁöÑÊòØ HTML ÂÜÖÂÆπ„ÄÇ
// HTML ÂèØ‰ª•Âú® NODE ‰πãÈó¥Á≠â‰ª∑ËΩ¨Êç¢„ÄÇ
// ËÄåÁî±‰∫é Markdown ÁõÆÂâçÂú®ËΩ¨Êç¢Êàê HTML Êó∂ÈááÁî®‰∫ÜÂêéÁ´ØÊ∏≤Êüì‰ª£Á†Å„ÄÇ
// ÊâÄ‰ª• chroma Êää code ÂåÖË£πÂú®‰∫Ü table ‰∏≠„ÄÇÈúÄË¶ÅÁâπÂà´Â§ÑÁêÜ„ÄÇ
//
// https://yari-demos.prod.mdn.mozit.cloud/en-US/docs/Web/HTML/Inline_elements
func WithHtmlPrettifier() Option2 {
	return &_ContentPrettifier{}
}

// -----------------------------------------------------------------------------

// Ê≤πÁÆ°ÁöÑÂàÜ‰∫´ËßÜÈ¢ë iframe Á´üÁÑ∂ÈªòËÆ§‰∏çÊòØ lazy lading ÁöÑÔºåÊúâÁÇπÂÑøÊó†ËØ≠üòì„ÄÇ
// ÁõÆÂâçÁ¢éÁ¢éÂøµÊòØÂÖ®ÈÉ®Âä†ËΩΩÁöÑÔºåÊúâÂ•ΩÂá†‰∏™ËßÜÈ¢ëÔºå‰ºö‰∏•ÈáçÂΩ±ÂìçÈ°µÈù¢Âä†ËΩΩÈÄüÂ∫¶„ÄÇ
//
// ÂÅöÊ≥ïÊòØËß£Êûê HTML BlockÔºåÂà§Êñ≠ÊòØÂê¶‰∏∫ iframeÔºåÁÑ∂ÂêéÊ∑ªÂä†Â±ûÊÄß„ÄÇ
//
// NOTEÔºöMarkdown ËôΩÁÑ∂ÂÖÅËÆ∏ html Âíå  markdown ‰∫§ÂèâÊ∑∑ÂÜô„ÄÇ‰ΩÜÊòØÂ§ÑÁêÜËøôÁßç‰∫§ÂèâÁöÑÂÜÖÂÆπ
// ÈùûÂ∏∏Â§çÊùÇÔºàÊ∂âÂèä‰∏çÂÆåÊï¥ html ÁöÑËß£Êûê‰∏éËøòÂéüÔºâÔºåÊâÄ‰ª•ÊöÇÊó∂‰∏çÊîØÊåÅËøôÁßçÊÉÖÂÜµ„ÄÇ
// ËøôÁßçÊÉÖÂÜµÂæàÂ∞ëÔºåÂÉèÊòØ <iframe Ê≤πÁÆ°ËßÜÈ¢ë> ÈÉΩÊòØÂú®‰∏ÄË°åÂÜÖ„ÄÇÂ∞±ÁÆóÂèØ‰ª•Â§öË°åÔºå‰πü‰∏ç‰ºöÂíå markdown ‰∫§Áªá„ÄÇ
// ËôΩÁÑ∂ iframe ÊòØ inline Á±ªÂûãÁöÑÂÖÉÁ¥†Ôºå‰ΩÜÊòØÂ∫îËØ•Ê≤°‰∫∫ÊîæÂú®ÊÆµËêΩÂÜÖÂêßÔºüÈÉΩÊòØÁõ¥Êé•Á≤òË¥¥Êàê‰∏∫‰∏ÄÊÆµÁöÑ„ÄÇÂê¶Âàô‰∏çËÉΩÂ§ÑÁêÜ„ÄÇ
//
// https://developer.mozilla.org/en-US/docs/Web/Performance/Lazy_loading#loading_attribute
func WithLazyLoadingFrames() Option2 {
	return &_LazyLoadingFrames{}
}

type _LazyLoadingFrames struct{}

func (m *_LazyLoadingFrames) FilterHtml(doc *html.Node) ([]byte, error) {

	var walk func(node *html.Node)
	walk = func(node *html.Node) {
		switch node.Type {
		case html.ElementNode:
			if node.Data == `iframe` {
				node.Attr = append(node.Attr, html.Attribute{Key: `loading`, Val: `lazy`})
			}
		}
		for c := node.FirstChild; c != nil; c = c.NextSibling {
			walk(c)
		}
	}

	walk(doc)

	return renderHtmlDoc(doc)
}

// -----------------------------------------------------------------------------

// ÂØπ WithUseAbsolutePaths ÁöÑË°•ÂÖÖ„ÄÇ
// ÂÖ∂ÂÆûÂê´‰πâÁõ∏ÂêåÔºåÂè™ÊòØÊç¢‰∫Ü‰∏™Êõ¥Ê≠£Á°ÆÁöÑÂêçÂ≠ó„ÄÇ
// ‰∏äËø∞Âè™ËÉΩÈíàÂØπ md ÁöÑ img Âíå aÔºåÊ≤°Ê≥ïÈíàÂØπÁî® html
// ÊèíÂÖ•ÁöÑ audio / video / iframe / object„ÄÇ
func WithRootedPaths(base string) Option2 {
	return &_RootedPaths{
		root: base,
	}
}

type _RootedPaths struct {
	root string
}

func (m *_RootedPaths) FilterHtml(doc *html.Node) ([]byte, error) {
	find := func(node *html.Node, name string) int {
		for i, a := range node.Attr {
			if a.Key == name {
				return i
			}
		}
		return -1
	}
	modify := func(val *string) bool {
		if u, err := url.Parse(*val); err == nil {
			if u.Scheme == "" && u.Host == "" && !filepath.IsAbs(u.Path) {
				u.Path = path.Join(m.root, u.Path)
				*val = u.EscapedPath()
				return true
			}
		}
		return false
	}

	var walk func(node *html.Node)
	walk = func(node *html.Node) {
		switch node.Type {
		case html.ElementNode:
			name := ""
			switch node.Data {
			case `iframe`, `source`, `audio`, `video`:
				name = `src`
			case `object`:
				name = `data`
			}
			if name != "" {
				if index := find(node, name); index >= 0 {
					// old := node.Attr[index].Val
					if modify(&node.Attr[index].Val) {
						// // ‰øÆÊîπÂêé‰øùÁïô‰∏Ä‰ªΩÂéüÂßãË∑ØÂæÑ‰æõÂÖ∂ÂÆÉÂú∞Êñπ‰ΩøÁî®„ÄÇ
						// node.Attr = append(node.Attr, html.Attribute{
						// 	Key: `data-path`,
						// 	Val: old,
						// })
					}
				}
			}
		}
		for c := node.FirstChild; c != nil; c = c.NextSibling {
			walk(c)
		}
	}

	walk(doc)

	return renderHtmlDoc(doc)
}

// -----------------------------------------------------------------------------

// ÂõæÁâá/ËßÜÈ¢ë/Â§ßÂ∞èÈôêÂà∂Âô®„ÄÇ
func WithMediaDimensionLimiter(max int) Option2 {
	return &_MediaDimensionLimiter{max: max}
}

type _MediaDimensionLimiter struct {
	max int
}

func (m *_MediaDimensionLimiter) FilterHtml(doc *html.Node) ([]byte, error) {
	find := func(node *html.Node, name string) int {
		for i, a := range node.Attr {
			if a.Key == name {
				return i
			}
		}
		return -1
	}
	add := func(node *html.Node, name string) {
		if p := find(node, `class`); p >= 0 {
			if strings.Contains(node.Attr[p].Val, name) {
				panic(`Â∑≤ÁªèÂåÖÂê´‰∫Ü`)
			}
			node.Attr[p].Val += ` ` + name
		} else {
			node.Attr = append(node.Attr, html.Attribute{
				Key: `class`,
				Val: name,
			})
		}
	}
	modify := func(node *html.Node, width, height *string) {
		var w, h int
		fmt.Sscanf(*width, "%d", &w)
		fmt.Sscanf(*height, "%d", &h)
		if w > h {
			add(node, `landscape`)
			if w > m.max {
				add(node, `too-wide`)
			}
		} else if h > w {
			add(node, `portrait`)
			if h > m.max {
				add(node, `too-high`)
			}
		}
	}

	var walk func(node *html.Node)
	walk = func(node *html.Node) {
		switch node.Type {
		case html.ElementNode:
			switch node.Data {
			case `video`, `img`:
				indexWidth := find(node, `width`)
				indexHeight := find(node, `height`)
				if indexWidth >= 0 && indexHeight >= 0 {
					modify(node, &node.Attr[indexWidth].Val, &node.Attr[indexHeight].Val)
				}
			}
		}
		for c := node.FirstChild; c != nil; c = c.NextSibling {
			walk(c)
		}
	}

	walk(doc)

	return renderHtmlDoc(doc)
}
